// 5.1 reverses: Cho ƒë·∫ßu v√†o l√† 1 m·∫£ng, Vi·∫øt m·ªôt function ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c th·ª© t·ª± ph·∫ßn t·ª≠ trong m·∫£ng , y√™u c·∫ßu kh√¥ng d√πng h√†m Reverses c√≥ s·∫µn c·ªßa javascript ( d√πng forEach ho·∫∑c reduce )

const reverseArray = (arr) => {
  return arr.reduce((acc, curr) => [curr, ...acc], []);
}

// 5.2 chunk: Cho m·ªôt m·∫£ng ƒë√†u v√†o vi·∫øt m·ªôt function ƒë·ªÉ chia ƒë·ªÅu m·∫£ng theo s·ªë ph·∫ßn ch·ªâ ƒë·ªãnh

const chunkArray = (arr, size) => {
  return arr.reduce((acc, curr) => {
    const last = acc[acc.length - 1];
    if (!last || last.length === size) {
      acc.push([curr]);
    } else {
      last.push(curr);
    }
    return acc;
  }, []);
}

// C√°ch kh√°c
const chunkArrayAlternative = (arr, size) => {
  const result = [];
  for (let i = 0; i < arr.length; i += size) {
    result.push(arr.slice(i, i + size));
  }
  return result;
}


// 5.3 unique: cho m·ªôt m·∫£ng ƒë·∫ßu v√†o, vi·∫øt m·ªôt function ƒë·ªÉ lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ b·ªã l·∫∑p trong m·∫£ng

const uniqueArray = (arr) => {
  return arr.filter((item, index) => arr.indexOf(item) === index);
}

// C√°ch kh√°c
const uniqueArrayAlternative = (arr) => {
  return [...new Set(arr)];
}

// 5.4 uniq ArrayObject: gi·ªëng unip nh∆∞ng m·ªü r·ªông cho 1 collection
// V√≠ d·ª•:
// [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'y': 2, 'x': 1 }] 
// üëâ [{ ‚Äòx': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]

const uniqArrayObject = (arr) => {
  return arr.filter((item, index) => arr.findIndex(t => t.x === item.x && t.y === item.y) === index);
}

// 5.5 Group by: Cho ƒë·∫ßu v√†o l√† 1 collection ( array of object ), Vi·∫øt m·ªôt function ƒë·ªÉ tr·∫£ ra 1 OBJECT m·ªõi ch·ª©a d·ªØ li·ªáu ƒë∆∞·ª£c group theo tr∆∞·ªùng ch·ªâ ƒë·ªãnh. 
// V√≠ d·ª• : 
// const collect = [{a: 1, b: 2}, {a: 1, b: 3}, {a: 2, b: 2}];
// groupBy(collect, ‚Äòa'); 
// üëâ output {1: [{a: 1, b: 2}, {a: 1, b: 3}], 2: [{a: 2, b: 2}]}

// groupBy(collect, ‚Äòb'); 
// üëâ output {2: [{a: 1, b: 2}, {a: 2, b: 2}], 3: [{a: 1, b: 3}]}

const groupBy = (arr, field) => {
  return arr.reduce((acc, curr) => {
    const key = curr[field];
    if (!acc[key]) {
      acc[key] = [];
    }
    acc[key].push(curr);
    return acc;
  }, {});
}

// 5.6 TrimAll: Vi·∫øt function lo·∫°i b·ªè t·∫•t c·∫£ kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi c·ªßa m·ªôt chu·ªói b·∫•t k·ª≥, n·∫øu c√≥ kho·∫£ng tr·∫Øng ·ªü gi·ªØa chu·ªói ƒë√≥ th√¨ ch·ªâ gi·ªØ l·∫°i m·ªôt kho·∫£ng tr·∫Øng. 

const trimAll = (str) => {
  return str.trim().replace(/\s+/g, ' ');
}

// 5.7 MapKey: Cho 1 m·∫£ng c√°c key, v√†o 1 m·∫£ng c√°c object , Vi·∫øt m·ªôt function ƒë·ªÉ tr·∫£ ra m·ªôt m·∫£ng c√°c object theo th·ª© t·ª± m·∫£ng c√°c key. ( Y√™u c·∫ßu d√πng h√†m map )
// V√≠ d·ª•
// keys = [‚Äòb', ‚Äòa', ‚Äòc']
// collections = [{a: 1, b: 1, c: 2, d: 4, e: 5}, {a: 2, b:1, c: 5, d: 4, e: 5}, {d: 4, e: 5, a: 22, b:11, c: 51, }]
// üëâ [{b: 1, a: 1, c: 2}, {b: 1, a: 2, c: 5}, {b: 11, a: 22, c: 51}]

const mapKey = (keys, collections) => {
  return collections.map(item => {
    return keys.map(key => item[key]);
  });
}


// 5.8 Switch Order: Vi·∫øt function ƒë·ªÉ thay ƒë·ªïi th·ª© t·ª± order c·ªßa c√°c object. 
// V√≠ d·ª•:
// arr = [{id: 10, order: 0}, {id: 12, order: 1}, {id: 9, order: 2}, {id: 11, order: 3}]
// switchOrder(9, 1)  // ( chuy·ªÉn object c√≥ id b·∫±ng 9 l√™n v·ªã tr√≠ order = 1, thay ƒë·ªïi l·∫°i gi√° tr·ªã c·ªßa order )
// üëâ [{id: 10, order: 0}, {id: 9, order: 1}, {id: 12, order: 2}, {id: 11, order: 3}]

const switchOrder = (arr, id, newOrder) => {
  // T√¨m v·ªã tr√≠ c·ªßa object c·∫ßn di chuy·ªÉn
  const itemIndex = arr.findIndex(item => item.id === id);
  if (itemIndex === -1) return arr;

  // L·∫•y object c·∫ßn di chuy·ªÉn
  const item = arr[itemIndex];
  const oldOrder = item.order;

  // N·∫øu order m·ªõi l·ªõn h∆°n order c≈©
  if (newOrder > oldOrder) {
    // Gi·∫£m order c·ªßa c√°c object n·∫±m gi·ªØa oldOrder v√† newOrder
    arr.forEach(obj => {
      if (obj.order > oldOrder && obj.order <= newOrder) {
        obj.order--;
      }
    });
  } else {
    // TƒÉng order c·ªßa c√°c object n·∫±m gi·ªØa newOrder v√† oldOrder
    arr.forEach(obj => {
      if (obj.order >= newOrder && obj.order < oldOrder) {
        obj.order++;
      }
    });
  }

  // C·∫≠p nh·∫≠t order m·ªõi cho object ƒë∆∞·ª£c di chuy·ªÉn
  item.order = newOrder;

  // S·∫Øp x·∫øp l·∫°i m·∫£ng theo order
  return arr.sort((a, b) => a.order - b.order);
}

// 5.9 SumAll: Vi·∫øt function ƒë·ªÉ t√≠nh t·ªïng gi√° tr·ªã c·ªßa c√°c key c·ªßa c√°c ph·∫ßn t·ª≠ con trong m·∫£ng b·∫•t k·ª≥:
// V√≠ d·ª•: 
// Arr = [{a: 2, b: 10}, {a: 12, c: 11}, {a: 8, b: 14, d: 20}, {a: '8'}]
// üëâ {a: 30, b: 24, c: 11, d: 20}
// ƒê·∫ßu v√†o l√† m·ªôt m·∫£ng c√°c object v√† c√°c ph·∫ßn t·ª≠ trong object kh√¥ng c·ªë ƒë·ªãnh.
// G·ª£i √Ω js: reducer(), Object.keys()

const sumAll = (arr) => {
  return arr.reduce((result, obj) => {
    // L·∫•y t·∫•t c·∫£ c√°c key trong object hi·ªán t·∫°i
    Object.keys(obj).forEach(key => {
      // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh s·ªë n·∫øu l√† chu·ªói s·ªë
      const value = Number(obj[key]);
      // N·∫øu l√† s·ªë h·ª£p l·ªá th√¨ c·ªông v√†o k·∫øt qu·∫£
      if (!isNaN(value)) {
        result[key] = (result[key] || 0) + value;
      }
    });
    return result;
  }, {});
}

//5.10 TemplateString:
// ƒê·∫ßu v√†o: m·ªôt file template, v√† c√°c params, n·ªôi dung file v√† t√™n c√°c param kh√¥ng c·ªë ƒë·ªãnh
// ƒê·∫ßu ra: m·ªôt file m·ªõi v·ªõi n·ªôi dung l√† template v√† c√°c params ƒë∆∞·ª£c truy·ªÅn v√†o.
// G·ª£i √Ω js: s·ª≠ d·ª•ng fs ƒë·ªÉ ƒë·ªçc file v√† ghi file, d√πng regex v√† replace ƒë·ªÉ thay th·∫ø c√°c params b·∫±ng gi√° tr·ªã t∆∞∆°ng ·ª©ng 
// 		VD1: 
// ƒê·∫ßu v√†o l√† 1 file txt c√≥ n·ªôi dung:
// Hello {{name}}, how are you ?
// Params l√† {name: ‚ÄòJonny‚Äô}
// => k·∫øt qu·∫£ l√† 1 file m·ªõi v·ªõi n·ªôi dung:
// Hello Jonny, how are you ?

import fs from 'fs'

function templateString(filePath, params, outputFile) {
  let readFile = fs.readFileSync(filePath, 'utf8');

  for (let key in params) {
    let regex = new RegExp(`{{${key}}}`, 'g');
    readFile = readFile.replace(regex, params[key]);
  }
  fs.writeFileSync(outputFile, readFile, 'utf8');
  console.log(`File ƒë√£ ƒë∆∞·ª£c t·∫°o: ${outputFile}`);
}

templateString('template.txt', { name: 'Jonny' }, 'output.txt');
templateString(
  'template.html',
  {
    title: 'Search of skill',
    pageTitle: 'Home page',
    content:
      'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, consectetur',
  },
  'output.html'
);


// VD2:
// ƒê·∫ßu v√†o l√† 1 file html c√≥ n·ªôi dung








